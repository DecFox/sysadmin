---
- import_playbook: ansible-version.yml

- hosts: have_tor
  gather_facts: true # to fetch `jessie` codename
  tasks:
    # I'm aware of https://github.com/nusenu/ansible-relayor but it solves way
    # more complex problem and needs immediate ansible update and have already
    # dropped support for debian/jessie, that is still used as of 2018-07-21 :-(
    - name: fetch and install deb.torproject.org signing key
      apt_key:
        url: https://deb.torproject.org/torproject.org/A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.asc
        id: 'A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89'

    - name: installs apt-transport-https
      apt:
        name: apt-transport-https
        state: present
        update_cache: true
        cache_valid_time: 28800

    - name: adds deb.torproject.org repository and update apt cache
      apt_repository:
        repo: 'deb https://deb.torproject.org/torproject.org {{ ansible_lsb.codename }} main'
        state: present
        update_cache: yes

    - name: install tor
      apt:
        name: '{{ item }}'
        state: latest
        install_recommends: no # otherwise it installs exim and pile of other useless stuff
      with_items: [ deb.torproject.org-keyring, tor, tor-geoipdb ]

    - name: stop tor@default
      service:
        name: tor@default
        state: stopped

    # It's done here for `tor` UID to exist, the archive is created with command like following one:
    # $ sudo tar -cJ -C /var/lib/tor keys fingerprint state stats | gpg -e -r CD1BE2D81D08A09C >var_lib_tor_XXX.tar.xz.gpg
    - name: "Run: gpg --batch < var_lib_tor_XXX.tar.xz.gpg | ssh {{ inventory_hostname }} sudo tar -xJ -C /var/lib/tor"
      wait_for: path=/var/lib/tor/fingerprint
      when: lookup('env', 'MANUAL_TOR' ) | length > 0

    - name: generate new keys if needed
      command: tor --list-fingerprint --DisableNetwork 1 --Nickname OONITestHelper --OrPort auto --PublishServerDescriptor 0 --ExitRelay 0 --defaults-torrc /usr/share/tor/tor-service-defaults-torrc --Log "err stdout"
      args: { creates: /var/lib/tor/fingerprint }

    - name: fetch fingerprint
      command: cut -d ' '  -f 2 /var/lib/tor/fingerprint
      changed_when: false
      register: tor_fingerprint
      tags: conf

    - name: unwrap fingerprint
      set_fact:
        tor_fingerprint: '{{ tor_fingerprint.stdout }}'
      tags: conf

    - name: set torrc
      template: src=OONITestHelper.torrc dest=/etc/tor/torrc
      notify: restart tor
      tags: conf

  handlers:
    - name: test tor config
      command: /usr/bin/tor --verify-config
      listen:
        - restart tor

    - name: restart tor
      service:
        name: tor
        state: restarted
...
