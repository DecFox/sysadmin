---
- name: create group
  group: name=psql state=present

- name: create user
  user:
    name: "psql"
    group: "psql"
    comment: "psql for Postgres"
    state: present

- name: get the user ids
  shell: >
    egrep "^psql:" /etc/passwd | awk -F: '{ print $3":"$4 }'
  changed_when: false
  register: user_group_id

- name: PostgreSQL Server certificate
  import_role:
    name: ooca-cert
  vars:
    ooca_ssl_dir: /srv/psql_ssl
    ooca_ssl_subj: '/O=OONI/OU=PostgreSQL Server/CN={{ db_hostname }}'
    ooca_ca: postgres_ca
    ooca_group: psql

- name: postgres PGDATA directory
  file: dest=/srv/psql/pgdata state=directory owner=psql group=psql mode=0700

- name: place config in PGDATA
  template: src={{item}} dest=/srv/psql/{{item}}
  notify: restart psql
  with_items:
  - pg_hba.conf
  - postgresql.conf

# if `initdb` fails read `Arbitrary --user Notes` at https://hub.docker.com/_/postgres/
- name: docker run postgres
  docker_container:
    image: "{{ postgres_image }}"
    name: psql
    hostname: psql
    network_mode: 'host'
    purge_networks: true # drop `bridge` network
    volumes:
      - /etc/passwd:/etc/passwd:ro # to make `initdb` happy
      - /etc/group:/etc/group:ro # to make `initdb` happy
      - /srv/psql_ssl:/srv/psql_ssl:ro
      - /srv/psql/:/srv/psql/:rw
    env:
      PGDATA: /srv/psql/pgdata
      POSTGRES_DB: "{{ psql_db_name }}"
      POSTGRES_USER: "{{ psql_db_user }}"
      POSTGRES_PASSWORD: "{{ psql_db_password }}"
    command: "postgres -c 'config_file=/srv/psql/postgresql.conf' -c 'hba_file=/srv/psql/pg_hba.conf'"
    stop_signal: SIGINT # Fast shutdown. Default SIGTERM waits for all the sessions to terminate.
    user: "{{ user_group_id.stdout }}"
    stop_timeout: 60 # default is 10
    restart_policy: unless-stopped
...
