#!/usr/bin/env python3
#
# jupycron
#
# Warning: malicious jupyter filenames might allow command injection
#
# jupycron itself runs as root but the notebooks are run as jupyter
# monitor with: sudo journalctl -f -u jupycron

from pathlib import Path
import logging
import time
import hashlib
import json
import subprocess

DEFAULT_NOTEBOOK_PATH = Path("/var/lib/jupyter/notebooks/")
DEFAULT_OUTPUT_PATH = "/var/lib/jupyter/notebooks/jupycron"
RUNTIME_LIMIT = 3600
MAXMEM = 1000
log = logging.getLogger("jupycron")
log.setLevel(logging.DEBUG)

try:
    from systemd.journal import JournalHandler

    log.addHandler(JournalHandler())
except ImportError:
    log.addHandler(logging.StreamHandler())


def extract_jupycron_conf(nb):
    if not nb.is_file():
        raise Exception

    cmd = ["jupyter-nbconvert", "--to", "python", "--stdout", nb.as_posix()]
    py = subprocess.check_output(cmd, timeout=5)
    out = py.decode().splitlines()
    for li in out:
        if not li.startswith("# jupycron"):
            continue
        _1, _2, conf = li.split(None, 2)
        return json.loads(conf)


def time_to_run(conf):
    every = conf.get("every", "").split()
    if len(every) != 2 or every[-1] != "min":
        return False
    every_min = int(every[0])
    epoch_min = int(time.time() / 60)
    return epoch_min % every_min == 0


def generate_unit_name(nb):
    hash_ = nb.as_posix().encode()
    hash_ = hashlib.sha224(hash_).hexdigest()[:10]
    return nb.stem.replace(" ", "_") + "-" + hash_


def run_notebook(nb, conf):
    htmlfn = nb.with_suffix(".html").as_posix()
    htmlfn = htmlfn.replace(DEFAULT_NOTEBOOK_PATH.as_posix(), DEFAULT_OUTPUT_PATH)
    unitname = generate_unit_name(nb)
    # maxruntimesec = min(conf.get("MaxRuntime", RUNTIME_LIMIT), RUNTIME_LIMIT)
    memorymax = min(conf.get("MaxMem", MAXMEM), MAXMEM)
    cmd = [
        "systemd-run",
        f"--unit={unitname}",
        "--collect",
        "--wait",
        #"--uid=jupyter",
        "--gid=jupyter",
        "--working-directory=/var/lib/jupyter/notebooks/",
        #"--scope",
        "-p",
        f"MemoryMax={memorymax}M",
        #"-p",
        #f"MaxRuntimeSec={maxruntimesec}",
        "--setenv=AUTORUN=1",
        "jupyter-nbconvert",
        "--execute",
        "--to",
        "html",
        "--allow-errors",
        f"--output={htmlfn}",
        nb.as_posix(),
    ]
    log.info(f"running {' '.join(cmd)}")
    try:
        p = subprocess.check_output(cmd, stderr=subprocess.PIPE, timeout=5)
        out = p.decode()
        log.info(f"{unitname} output:\n{out}")
    except subprocess.CalledProcessError as e:
        log.info(f"Error in {unitname}. Output:\n{e.output.decode()}")

    log.info(f"{unitname} done")


def main():
    notebooks = sorted(DEFAULT_NOTEBOOK_PATH.glob("**/*autorun*.ipynb"))
    for nb in notebooks:
        if any(p.startswith(".") for p in nb.parts):
            continue
        try:
            conf = extract_jupycron_conf(nb)
            if conf is None:
                continue
            if time_to_run(conf):
                run_notebook(nb, conf)

        except Exception as e:
            print(e)


if __name__ == "__main__":
    main()
