- name: set permissions, owner and group
  file:
    path: "{{ proteus_install_path }}"
    state: directory
    owner: "{{ proteus_user }}"
    group: "{{ proteus_group }}"
    mode: "go-w"
    recurse: yes

- name: mkdir for config, data and binary
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ proteus_user }}"
    group: "{{ proteus_group }}"
    mode: "u=rwx,g=rx,o="
  with_items:
    - "{{ proteus_data_path }}"
    - "{{ proteus_config_path }}"
    - "{{ proteus_path }}"

- name: untar proteus tarball
  unarchive:
    src: "{{ proteus_tarball_url }}"
    dest: "{{ proteus_path }}"
    mode: 0755
    owner: "{{ proteus_user }}"
    group: "{{ proteus_group }}"
    copy: no

- name: Configure Proteus
  notify:
  - reload proteus
  template:
    src: proteus-orchestrate.toml.j2
    dest: "{{ proteus_config_path }}/proteus-orchestrate.toml"

- name: Check if proteus-events.service exists
  stat: path=/etc/systemd/system/proteus-events.service
  register: proteus_events

- name: Stop proteus-events service
  systemd:
    name: proteus-events.service
    state: stopped
    enabled: no
    daemon_reload: yes
  when: proteus_events.stat.exists == True

- name: Cleanup proteus-events files
  file:
    state: absent
    path: "{{ item }}"
  with_items:
    - "{{ proteus_config_path }}/proteus-events.toml"
    - "/etc/systemd/system/proteus-events.service"
  when: proteus_events.stat.exists == True

- name: Install proteus systemd service file
  notify:
  - restart proteus
  template:
    src: proteus-orchestrate.service
    dest: /etc/systemd/system/proteus-orchestrate.service

- name: Enable and start proteus service
  systemd:
    name: proteus-orchestrate.service
    state: started
    enabled: yes
    daemon_reload: yes

- include: setup-nginx.yml
