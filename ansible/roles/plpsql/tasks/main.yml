---
- name: create group
  group: name=plpsql state=present

- name: create user
  user:
    name: "plpsql"
    group: "plpsql"
    comment: "plpsql for Postgres"
    state: present
  register: plpsql_user

- name: pipeline postgres PGDATA directory
  file: dest=/srv/pl-psql state=directory owner=plpsql group=plpsql mode=0700

- name: place pg_hba.conf in PGDATA
  template: src=pg_hba.conf dest=/srv/pl-psql/pg_hba.conf owner=plpsql group=plpsql mode=0444
  notify: reload pl-psql

- name: place config in PGDATA for active DB
  template: src=postgresql.active.conf dest=/srv/pl-psql/postgresql.conf owner=plpsql group=plpsql mode=0444
  notify: reload pl-psql
  when: "'db_active' in group_names"

- name: drop recovery.conf from PGDATA on active DB
  file: name=/srv/pl-psql/recovery.conf state=absent
  notify: reload pl-psql
  when: "'db_active' in group_names"

- name: place config in PGDATA for standby DB
  template: src=postgresql.standby.conf dest=/srv/pl-psql/postgresql.conf owner=plpsql group=plpsql mode=0444
  notify: reload pl-psql
  when: "'db_standby' in group_names"

- name: place recovery.conf to PGDATA on standby DB
  template: src=recovery.conf dest=/srv/pl-psql/recovery.conf owner=plpsql group=plpsql mode=0444
  notify: reload pl-psql
  when: "'db_standby' in group_names"

- name: install openvpn
  apt:
    name: openvpn
    install_recommends: no
  tags: dbvpn

- name: openvpn create conf on standby node
  template: src=openvpn.standby.conf dest=/etc/openvpn/oonidbvpn.conf
  notify: systemctl daemon-reload
  when: "'db_standby' in group_names"
  tags: dbvpn

- name: openvpn create conf on active node
  template: src=openvpn.active.conf dest=/etc/openvpn/oonidbvpn.conf
  notify: systemctl daemon-reload
  when: "'db_active' in group_names"
  tags: dbvpn

- name: openvpn create shared secret on active node
  command: openvpn --genkey --secret /etc/openvpn/oonipgvpn.key
  when: "'db_active' in group_names"
  tags: dbvpn

- name: openvpn copy shared secret from active node
  slurp:
    src: /etc/openvpn/oonipgvpn.key
  register: pgvpn_secret
  when: "'db_active' in group_names"
  tags: dbvpn

- name: openvpn copy shared secret to standby node
  copy:
    content: "{{ pgvpn_secret }}"
    dest: /etc/openvpn/oonipgvpn.key
  when: "'db_standby' in group_names"
  tags: dbvpn

# if `initdb` fails read `Arbitrary --user Notes` at https://hub.docker.com/_/postgres/
- name: docker run pipeline postgres
  docker_container:
    image: openobservatory/sysadmin-postgres-metadb:20190412-010f6f70 # 9.6.12
    name: pl-psql
    hostname: pl-psql
    network_mode: 'host'
    purge_networks: true # drop `bridge` network
    volumes:
      - /etc/passwd:/etc/passwd:ro # to make `initdb` happy
      - /etc/group:/etc/group:ro # to make `initdb` happy
      - /srv/pl-psql_ssl:/srv/pl-psql_ssl:ro
      - /srv/pl-psql:/srv/pl-psql:rw
    # XXX this is disabled because it was triggering the following error:
    # container_linux.go:247: starting container process caused
    # "process_linux.go:359: container init caused \"rootfs_linux.go:54:
    # mounting \\\"tmpfs\\\" to rootfs
    # \\\"/var/lib/docker/aufs/mnt/e64b7ff9f8a5c196215a1c17f2bff18a94c8888a9bcffc8db60a49fc9ce93405\\\"
    # at \\\"/run/postgresql\\\" caused \\\"invalid argument\\\"\""
    # container_linux.go:247: starting container process caused
    # "process_linux.go:359: container init caused \"rootfs_linux.go:54: mounting
    # \\\"tmpfs\\\" to rootfs
    # \\\"/var/lib/docker/aufs/mnt/e64b7ff9f8a5c196215a1c17f2bff18a94c8888a9bcffc8db60a49fc9ce93405\\\"
    # at \\\"/run/postgresql\\\" caused \\\"invalid argument\\\"\""
    #tmpfs:
    #- '/run/postgresql:size=1m,mode=0700,uid=plpsql'
    env:
      PGDATA: /srv/pl-psql
      POSTGRES_DB: metadb
      POSTGRES_USER: shovel
      POSTGRES_PASSWORD: "{{ shovel_postgres_password }}"
      AWS_DEFAULT_REGION: us-east-1 # US East (N. Virginia)
      AWS_ACCESS_KEY_ID: "{{ metadb_wal_s3_key_id }}"
      AWS_SECRET_ACCESS_KEY: "{{ metadb_wal_s3_access_key }}"
      PUSHGATEWAY_CERT: "/srv/pl-psql_ssl/pusher/{{ inventory_hostname }}.cert"
      PUSHGATEWAY_KEY: "/srv/pl-psql_ssl/pusher/{{ inventory_hostname }}.key"
    stop_signal: SIGINT # Fast shutdown. Default SIGTERM waits for all the sessions to terminate.
    user: "{{ plpsql_user.uid }}:{{ plpsql_user.group }}"
    stop_timeout: 60 # default is 10
    restart_policy: unless-stopped
...
